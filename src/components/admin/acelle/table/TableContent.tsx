
import React, { useState, useEffect } from 'react';
import {
  Table,
  TableBody,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { AcelleCampaign, AcelleAccount } from "@/types/acelle.types";
import { AcelleTableRow } from "../table/AcelleTableRow";
import { CampaignsTableHeader } from "../table/TableHeader";
import { AcelleTableBatchLoader } from "../table/AcelleTableBatchLoader";
import { toast } from "sonner";
import { enrichCampaignsWithStats } from "@/services/acelle/api/enrichCampaigns";
import { Spinner } from "@/components/ui/spinner";

interface TableContentProps {
  campaigns: AcelleCampaign[];
  account?: AcelleAccount;
  sortBy: string;
  sortOrder: "asc" | "desc";
  onSort: (column: string) => void;
  onViewCampaign: (uid: string) => void;
  demoMode?: boolean;
}

export const TableContent = ({
  campaigns,
  account,
  sortBy,
  sortOrder,
  onSort,
  onViewCampaign,
  demoMode = false
}: TableContentProps) => {
  const [isStatsLoaded, setIsStatsLoaded] = useState(false);
  const [isInitiallyLoading, setIsInitiallyLoading] = useState(true);
  const [loadAttempts, setLoadAttempts] = useState(0);
  const [enrichedCampaigns, setEnrichedCampaigns] = useState<AcelleCampaign[]>([]);

  // Reset stats loading state when campaigns change
  useEffect(() => {
    setIsStatsLoaded(false);
    setIsInitiallyLoading(true);
    
    // Toujours initialiser avec les campagnes originales pour avoir un affichage rapide
    setEnrichedCampaigns(campaigns);
    
    // Enrichir les campagnes avec des statistiques dès le chargement
    const loadStats = async () => {
      console.log(`Trying to enrich ${campaigns.length} campaigns with statistics from cache`);
      
      if (campaigns.length === 0) {
        setIsInitiallyLoading(false);
        return;
      }
      
      try {
        toast.loading("Initialisation des statistiques...", {
          id: "loading-stats",
          duration: 3000
        });
        
        if (demoMode) {
          // En mode démo, on utilise les campagnes telles quelles
          console.log("Demo mode active, statistics will be generated by the batch loader");
          setIsInitiallyLoading(false);
          return;
        }
        
        if (account) {
          // Essayer d'enrichir avec les statistiques du cache immédiatement
          const result = await enrichCampaignsWithStats(campaigns, account);
          
          console.log(`Enriched ${result.length} campaigns with cache statistics`);
          console.log("First campaign stats:", result[0]?.statistics);
          
          setEnrichedCampaigns(result);
          
          // Vérifier si on a des statistiques réelles
          const hasStats = result.some(c => 
            c.statistics && (c.statistics.subscriber_count > 0 || c.statistics.open_count > 0)
          );
          
          if (hasStats) {
            console.log("Successfully loaded campaign statistics from cache");
            setIsStatsLoaded(true);
            toast.success("Statistiques initiales chargées", {
              id: "loading-stats",
              duration: 2000
            });
          } else {
            console.log("No valid statistics found in cache, will continue with batch loading");
            toast.info("Chargement complet des statistiques...", {
              id: "loading-stats",
              duration: 3000
            });
          }
        }
      } catch (err) {
        console.error("Error enriching campaigns with statistics:", err);
      } finally {
        setIsInitiallyLoading(false);
      }
    };
    
    loadStats();
  }, [campaigns, account, demoMode]);
  
  // Callback function when batch loading is complete
  const handleBatchLoaded = (updatedCampaigns: AcelleCampaign[]) => {
    console.log("Batch loading completed, updating campaigns with statistics");
    
    // Log the first campaign to see if it has stats
    if (updatedCampaigns.length > 0) {
      console.log("First campaign after batch loading:", updatedCampaigns[0].name);
      console.log("First campaign statistics:", updatedCampaigns[0].statistics);
      console.log("Has valid statistics:", 
        updatedCampaigns[0].statistics && 
        (updatedCampaigns[0].statistics.subscriber_count > 0 || 
         updatedCampaigns[0].statistics.open_count > 0)
      );
    }
    
    // Uniquement mettre à jour si nous avons des campagnes enrichies
    if (updatedCampaigns && updatedCampaigns.length > 0) {
      setEnrichedCampaigns(updatedCampaigns);
      setIsStatsLoaded(true);
      setLoadAttempts(prev => prev + 1);
      
      // Vérifier si les campagnes ont maintenant des statistiques
      const hasStats = updatedCampaigns.some(c => 
        c.statistics && (
          c.statistics.subscriber_count > 0 || 
          c.statistics.open_count > 0 || 
          c.statistics.click_count > 0
        )
      );
      
      if (hasStats) {
        console.log("Statistics loaded successfully");
        toast.success("Statistiques complètes chargées", {
          id: "loading-stats",
          duration: 2000
        });
      } else {
        console.warn("Failed to load statistics after batch loading");
        toast.error("Certaines statistiques n'ont pas pu être chargées", {
          id: "loading-stats",
          duration: 3000
        });
      }
    }
  };

  // Display a loading state if initially loading
  if (isInitiallyLoading && !demoMode && campaigns.length > 0) {
    return (
      <div className="rounded-md border p-8 flex flex-col items-center justify-center">
        <Spinner className="w-8 h-8 mb-4" />
        <p className="text-center text-gray-500">
          Chargement des statistiques initiales...
        </p>
      </div>
    );
  }

  // Toujours utiliser les campagnes enrichies si disponibles
  const campaignsToDisplay = enrichedCampaigns.length > 0 ? enrichedCampaigns : campaigns;

  return (
    <div className="rounded-md border">
      {/* Batch statistics loader (invisible) */}
      <AcelleTableBatchLoader 
        campaigns={campaigns} 
        account={account}
        demoMode={demoMode}
        onBatchLoaded={handleBatchLoaded}
        forceRefresh={loadAttempts === 0} // Forcer le rafraîchissement au premier chargement
      />
      
      <Table>
        <TableHeader>
          <TableRow>
            <CampaignsTableHeader 
              columns={[
                { key: "name", label: "Nom" },
                { key: "subject", label: "Sujet" },
                { key: "status", label: "Statut" },
                { key: "delivery_date", label: "Date d'envoi" },
                { key: "subscriber_count", label: "Destinataires" },
                { key: "open_rate", label: "Taux d'ouverture" },
                { key: "click_rate", label: "Taux de clic" },
                { key: "bounce_count", label: "Bounces" },
                { key: "", label: "" }
              ]}
              sortBy={sortBy}
              sortOrder={sortOrder}
              onSort={onSort}
            />
          </TableRow>
        </TableHeader>
        <TableBody>
          {campaignsToDisplay.map((campaign) => (
            <AcelleTableRow 
              key={campaign.uid || campaign.campaign_uid} 
              campaign={campaign} 
              account={account}
              onViewCampaign={onViewCampaign}
              demoMode={demoMode}
              forceReload={loadAttempts > 0}
            />
          ))}
        </TableBody>
      </Table>
    </div>
  );
};
