
import React, { useState, useEffect } from 'react';
import {
  Table,
  TableBody,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { AcelleCampaign, AcelleAccount } from "@/types/acelle.types";
import { AcelleTableRow } from "../table/AcelleTableRow";
import { CampaignsTableHeader } from "../table/TableHeader";
import { AcelleTableBatchLoader } from "../table/AcelleTableBatchLoader";
import { toast } from "sonner";
import { enrichCampaignsWithStats } from "@/services/acelle/api/directStats";
import { Spinner } from "@/components/ui/spinner";

interface TableContentProps {
  campaigns: AcelleCampaign[];
  account?: AcelleAccount;
  sortBy: string;
  sortOrder: "asc" | "desc";
  onSort: (column: string) => void;
  onViewCampaign: (uid: string) => void;
  demoMode?: boolean;
}

export const TableContent = ({
  campaigns,
  account,
  sortBy,
  sortOrder,
  onSort,
  onViewCampaign,
  demoMode = false
}: TableContentProps) => {
  const [isStatsLoaded, setIsStatsLoaded] = useState(false);
  const [isInitiallyLoading, setIsInitiallyLoading] = useState(true);
  const [loadAttempts, setLoadAttempts] = useState(0);
  const [enrichedCampaigns, setEnrichedCampaigns] = useState<AcelleCampaign[]>([]);

  // Reset stats loading state when campaigns change
  useEffect(() => {
    setIsStatsLoaded(false);
    setIsInitiallyLoading(true);
    
    // Always try to enrich campaigns with statistics when campaigns change
    const loadStats = async () => {
      console.log(`Trying to enrich ${campaigns.length} campaigns with statistics from cache`);
      if (campaigns.length > 0) {
        try {
          toast.loading("Initialisation des statistiques...", {
            id: "loading-stats",
            duration: 3000
          });
          
          if (demoMode) {
            // In demo mode, just set the campaigns directly and don't try to enrich them
            setEnrichedCampaigns(campaigns);
            setIsInitiallyLoading(false);
            console.log("Demo mode active, statistics will be generated by the batch loader");
            return;
          }
          
          // Use the enrichCampaignsWithStats function to load statistics from cache
          if (account) {
            const result = await enrichCampaignsWithStats(campaigns, account);
            setEnrichedCampaigns(result);
            
            // Check if we have actual stats
            const hasStats = result.some(c => 
              c.statistics && (c.statistics.subscriber_count > 0 || c.statistics.open_count > 0)
            );
            
            if (hasStats) {
              console.log("Successfully loaded campaign statistics from cache");
              setIsStatsLoaded(true);
              toast.success("Statistiques initiales chargées", {
                id: "loading-stats",
                duration: 2000
              });
            } else {
              console.log("No statistics found in cache, will try batch loading");
              toast.info("Chargement complet des statistiques...", {
                id: "loading-stats",
                duration: 3000
              });
            }
          } else {
            console.log("No account provided, can't enrich campaigns with statistics");
            setEnrichedCampaigns(campaigns);
          }
        } catch (err) {
          console.error("Error enriching campaigns with statistics:", err);
          // If there's an error, just use the original campaigns
          setEnrichedCampaigns(campaigns);
        } finally {
          setIsInitiallyLoading(false);
        }
      } else {
        setIsInitiallyLoading(false);
        setEnrichedCampaigns([]);
      }
    };
    
    loadStats();
    
  }, [campaigns, account, demoMode]);
  
  // Callback function when batch loading is complete
  const handleBatchLoaded = (updatedCampaigns: AcelleCampaign[]) => {
    console.log("Batch loading completed, updating campaigns with statistics", updatedCampaigns);
    setEnrichedCampaigns(updatedCampaigns);
    setIsStatsLoaded(true);
    setLoadAttempts(prev => prev + 1);
    
    // Check if campaigns now have statistics
    const hasStats = updatedCampaigns.some(c => 
      c.statistics && (c.statistics.subscriber_count > 0 || c.statistics.open_count > 0)
    );
    
    if (hasStats) {
      console.log("Statistics loaded successfully");
      toast.success("Statistiques complètes chargées", {
        id: "loading-stats",
        duration: 2000
      });
    } else if (loadAttempts > 0) {
      console.warn("Failed to load statistics after attempt");
      toast.error("Certaines statistiques n'ont pas pu être chargées", {
        id: "loading-stats",
        duration: 3000
      });
    }
  };

  // Display a loading state if initially loading
  if (isInitiallyLoading && !demoMode && campaigns.length > 0) {
    return (
      <div className="rounded-md border p-8 flex flex-col items-center justify-center">
        <Spinner className="w-8 h-8 mb-4" />
        <p className="text-center text-gray-500">
          Chargement des statistiques initiales...
        </p>
      </div>
    );
  }

  // Use the campaigns with statistics for display
  const campaignsToDisplay = enrichedCampaigns.length > 0 ? enrichedCampaigns : campaigns;

  return (
    <div className="rounded-md border">
      {/* Batch statistics loader (invisible) */}
      <AcelleTableBatchLoader 
        campaigns={campaigns} 
        account={account}
        demoMode={demoMode}
        onBatchLoaded={handleBatchLoaded}
      />
      
      <Table>
        <TableHeader>
          <TableRow>
            <CampaignsTableHeader 
              columns={[
                { key: "name", label: "Nom" },
                { key: "subject", label: "Sujet" },
                { key: "status", label: "Statut" },
                { key: "delivery_date", label: "Date d'envoi" },
                { key: "subscriber_count", label: "Destinataires" },
                { key: "open_rate", label: "Taux d'ouverture" },
                { key: "click_rate", label: "Taux de clic" },
                { key: "bounce_count", label: "Bounces" },
                { key: "", label: "" }
              ]}
              sortBy={sortBy}
              sortOrder={sortOrder}
              onSort={onSort}
            />
          </TableRow>
        </TableHeader>
        <TableBody>
          {campaignsToDisplay.map((campaign) => (
            <AcelleTableRow 
              key={campaign.uid || campaign.campaign_uid} 
              campaign={campaign} 
              account={account}
              onViewCampaign={onViewCampaign}
              demoMode={demoMode}
              forceReload={loadAttempts > 0}
            />
          ))}
        </TableBody>
      </Table>
    </div>
  );
};
