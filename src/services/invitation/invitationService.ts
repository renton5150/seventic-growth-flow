
import { supabase } from "@/integrations/supabase/client";

export interface CreateInvitationData {
  email: string;
  name: string;
  role: 'admin' | 'growth' | 'sdr';
}

export interface InvitationResponse {
  success: boolean;
  error?: string;
  user?: any;
  userExists?: boolean;
  method?: string;
}

// Cr√©er un utilisateur directement avec mot de passe temporaire
export const createUserDirectly = async (data: CreateInvitationData): Promise<InvitationResponse & { tempPassword?: string }> => {
  try {
    console.log("üöÄ Cr√©ation utilisateur direct:", data);
    
    const { data: result, error } = await supabase.functions.invoke('simple-email-invite', {
      body: {
        email: data.email,
        userName: data.name,
        userRole: data.role,
        action: 'create_direct'
      }
    });
    
    if (error) {
      console.error("‚ùå Erreur fonction Edge:", error);
      return {
        success: false,
        error: `Erreur de connexion: ${error.message}`
      };
    }
    
    if (!result?.success) {
      console.error("‚ùå √âchec cr√©ation utilisateur:", result);
      return {
        success: false,
        error: result?.error || "√âchec cr√©ation utilisateur"
      };
    }
    
    console.log("‚úÖ Utilisateur cr√©√© directement avec succ√®s");
    return {
      success: true,
      user: result.user,
      tempPassword: result.user?.tempPassword
    };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Erreur inconnue";
    console.error("‚ùå Exception cr√©ation utilisateur direct:", error);
    return { success: false, error: errorMessage };
  }
};

// Envoyer une invitation par email (API Supabase native)
export const createInvitation = async (data: CreateInvitationData): Promise<InvitationResponse> => {
  try {
    console.log("üöÄ Envoi invitation email:", data);
    
    const { data: result, error } = await supabase.functions.invoke('simple-email-invite', {
      body: {
        email: data.email,
        userName: data.name,
        userRole: data.role,
        action: 'invite'
      }
    });
    
    if (error) {
      console.error("‚ùå Erreur fonction Edge:", error);
      return {
        success: false,
        error: `Erreur de connexion: ${error.message}`
      };
    }
    
    if (!result?.success) {
      console.error("‚ùå √âchec envoi invitation:", result);
      return {
        success: false,
        error: result?.error || "√âchec envoi invitation"
      };
    }
    
    console.log("‚úÖ Invitation envoy√©e avec succ√®s");
    return {
      success: true,
      userExists: result.userExists,
      method: result.method
    };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Erreur inconnue";
    console.error("‚ùå Exception envoi invitation:", error);
    return { success: false, error: errorMessage };
  }
};

// R√©initialiser le mot de passe d'un utilisateur existant
export const resetUserPassword = async (email: string): Promise<InvitationResponse> => {
  try {
    console.log("üöÄ R√©initialisation mot de passe:", email);
    
    const { data: result, error } = await supabase.functions.invoke('simple-email-invite', {
      body: {
        email: email,
        action: 'reset_password'
      }
    });
    
    if (error) {
      console.error("‚ùå Erreur fonction Edge:", error);
      return {
        success: false,
        error: `Erreur de connexion: ${error.message}`
      };
    }
    
    if (!result?.success) {
      console.error("‚ùå √âchec r√©initialisation:", result);
      return {
        success: false,
        error: result?.error || "√âchec r√©initialisation mot de passe"
      };
    }
    
    console.log("‚úÖ Lien de r√©initialisation envoy√© avec succ√®s");
    return {
      success: true,
      method: result.method
    };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Erreur inconnue";
    console.error("‚ùå Exception r√©initialisation mot de passe:", error);
    return { success: false, error: errorMessage };
  }
};

// Pour compatibilit√© - fonctions conserv√©es mais simplifi√©es
export const validateInvitationToken = async (token: string) => {
  console.log("validateInvitationToken - fonction legacy, non utilis√©e");
  return { success: false, error: "Fonction non disponible" };
};

export const completeSignup = async (token: string, password: string) => {
  console.log("completeSignup - fonction legacy, non utilis√©e");
  return { success: false, error: "Fonction non disponible" };
};

export const getAllInvitations = async () => {
  console.log("getAllInvitations - fonction legacy, non utilis√©e");
  return { success: true, data: [] };
};
